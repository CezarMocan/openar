// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  
  pseudonym String?
  ethAddress String?   @db.VarChar(42) @unique
  
  roles     String[]

  url String?
  bio String?

  emailVerified Boolean @default(false)
  acceptedTerms Boolean @default(false)
  isBanned      Boolean @default(false)
  isNew         Boolean @default(true)

  artworks   Artwork[] @relation("artworks")
  collection ArObject2Collector[]
  arObjects  ArObject[] @relation("arObjects")
  
  tokens      Token[]
  images      Image[]
  arModels    ArModel[]
  files       File[]

  profileImageId Int?
  profileImage   Image? @relation(fields: [profileImageId], references: [id], name: "userProfileImage")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Artwork {
  id   Int @id @default(autoincrement())
  type Int @default(1)

  key         String @unique @db.VarChar(16)
  
  status     Int    @default(0)

  title       String?
  description String @default("")
  url          String?
  video        String?

  isBanned      Boolean @default(false)

  public        Boolean @default(true)

  creatorId Int
  creator   User? @relation(fields: [creatorId], references: [id], name: "artworks")

  lat           Float?
  lng           Float?
  
  files File[]

  arObjects ArObject[]

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "artworkHeroImage")

  images Image[] @relation("imagesArtwork")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ArObject {
  id          Int     @id @default(autoincrement())
  
  key         String @unique @db.VarChar(16)
  
  status     Int    @default(0)
  
  title         String?
  description   String?
  orderNumber     Int? @default(0)
  editionOf     Int?
  
  lat           Float?
  lng           Float?

  askPrice    Float? @default(0.0)
  public        Boolean @default(true)

  isBanned      Boolean @default(false)

  creatorId Int
  creator   User? @relation(fields: [creatorId], references: [id], name: "arObjects")

  collectors  ArObject2Collector[] 
  
  artworkId Int
  artwork   Artwork? @relation(fields: [artworkId], references: [id])

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "arObjectHeroImage")

  images Image[] @relation("imagesObject")
  arModels ArModel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ArObject2Collector {
  id              Int     @id @default(autoincrement())
  arObjectId      Int
  
  userId          Int?
  tokenId         String
  editonNumber    Int
  ownerEthAddress String? 
  sold            Boolean?
  
  collector User? @relation(fields: [userId], references: [id])
  arObject  ArObject? @relation(fields: [arObjectId], references: [id])
}

model Image {
  id         Int    @id @default(autoincrement())
  nanoid       String @unique @db.VarChar(21)
  meta       Json
  status     Int    @default(0)
  retryCount Int    @default(0)
  orderNumber     Int? @default(0)
  artworks Artwork[] @relation("imagesArtwork")
  arObjects  ArObject[]  @relation("imagesObject")

  ownerId    Int  
  owner      User   @relation(fields: [ownerId], references: [id])
  
  profileImageUsers User[]    @relation("userProfileImage")
  heroImageArtworks Artwork[] @relation("artworkHeroImage")
  heroImageArObjects  ArObject[]  @relation("arObjectHeroImage")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ArModel {
  id         Int    @id @default(autoincrement())
  nanoid       String @unique @db.VarChar(21)
  meta       Json
  status     Int    @default(0)
  retryCount Int    @default(0)
  type       String @db.VarChar(8)
  arObjectId   Int
  arObject     ArObject @relation(fields: [arObjectId], references: [id])
  ownerId    Int  
  owner      User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model File {
  id   Int    @id @default(autoincrement())
  nanoid String @unique @db.VarChar(21)
  meta Json

  artworkId Int
  artwork   Artwork @relation(fields: [artworkId], references: [id])
  ownerId    Int  
  owner      User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Token {
  id    Int    @id @default(autoincrement())
  token String
  type  Int

  ownerId Int
  owner   User     @relation(fields: [ownerId], references: [id])
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId], name: "indexTokenOwnerId")
}

/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { NexusResolverContext } from "./../nexus-graphql/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JWT";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JWT";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ImageTranslationInput: { // input type
    id: number; // Int!
    translations: NexusGenScalars['JSON']; // JSON!
  }
  ImageUpdateInput: { // input type
    meta: NexusGenScalars['JSON']; // JSON!
  }
  UserCreateInput: { // input type
    acceptedTerms: boolean; // Boolean!
    email: string; // String!
    firstName: string; // String!
    isBanned: boolean; // Boolean!
    lastName: string; // String!
    password: string; // String!
    role: string; // String!
  }
  UserProfileUpdateInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    firstName: string; // String!
    lastName: string; // String!
  }
  UserSignupInput: { // input type
    acceptedTerms: boolean; // Boolean!
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
  }
  UserUpdateInput: { // input type
    email: string; // String!
    firstName: string; // String!
    isBanned: boolean; // Boolean!
    lastName: string; // String!
    role: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  EmailAddress: any
  JSON: any
  JWT: any
}

export interface NexusGenObjects {
  AdminUser: { // root type
    firstName?: string | null; // String
    id?: number | null; // Int
    lastName?: string | null; // String
  }
  AuthPayload: { // root type
    tokens?: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user?: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // root type
    expires: string; // String!
    token?: NexusGenScalars['JWT'] | null; // JWT
  }
  AuthPayloadTokens: { // root type
    access?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // root type
    id: number; // Int!
    permissions?: Array<string | null> | null; // [String]
    roles?: Array<string | null> | null; // [String]
  }
  BooleanResult: { // root type
    result: boolean; // Boolean!
  }
  GeoPoint: { // root type
    lat?: number | null; // Float
    lng?: number | null; // Float
  }
  Image: { // root type
    alt?: NexusGenScalars['JSON'] | null; // JSON
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    credits?: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    meta?: NexusGenScalars['JSON'] | null; // JSON
    status?: number | null; // Int
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    uuid?: string | null; // String
  }
  ImageQueryResult: { // root type
    images?: Array<NexusGenRootTypes['Image'] | null> | null; // [Image]
    totalCount?: number | null; // Int
  }
  ImageStatus: { // root type
    id: number; // Int!
    meta?: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
  }
  Mutation: {};
  ProfileUser: { // root type
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    profileImageId?: number | null; // Int
  }
  Query: {};
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    isBanned?: boolean | null; // Boolean
    lastName?: string | null; // String
    profileImageId?: number | null; // Int
    role?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  UsersQueryResult: { // root type
    totalCount?: number | null; // Int
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
}

export interface NexusGenInterfaces {
  UserBaseNode: NexusGenRootTypes['ProfileUser'] | NexusGenRootTypes['User'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AdminUser: { // field return type
    firstName: string | null; // String
    id: number | null; // Int
    lastName: string | null; // String
  }
  AuthPayload: { // field return type
    tokens: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // field return type
    expires: string; // String!
    token: NexusGenScalars['JWT'] | null; // JWT
  }
  AuthPayloadTokens: { // field return type
    access: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // field return type
    id: number; // Int!
    permissions: Array<string | null> | null; // [String]
    roles: Array<string | null> | null; // [String]
  }
  BooleanResult: { // field return type
    result: boolean; // Boolean!
  }
  GeoPoint: { // field return type
    lat: number | null; // Float
    lng: number | null; // Float
  }
  Image: { // field return type
    alt: NexusGenScalars['JSON'] | null; // JSON
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    credits: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    meta: NexusGenScalars['JSON'] | null; // JSON
    status: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    uuid: string | null; // String
  }
  ImageQueryResult: { // field return type
    images: Array<NexusGenRootTypes['Image'] | null> | null; // [Image]
    totalCount: number | null; // Int
  }
  ImageStatus: { // field return type
    id: number; // Int!
    meta: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
  }
  Mutation: { // field return type
    authLogin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authLogout: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordRequest: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordReset: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authRefresh: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authRequestEmailVerificationEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authVerifyEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    imageDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    imageUpdate: NexusGenRootTypes['Image']; // Image!
    userCreate: NexusGenRootTypes['User']; // User!
    userDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    userProfileImageDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    userProfilePasswordUpdate: NexusGenRootTypes['User']; // User!
    userProfileUpdate: NexusGenRootTypes['User']; // User!
    userSignup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    userUpdate: NexusGenRootTypes['BooleanResult']; // BooleanResult!
  }
  ProfileUser: { // field return type
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    profileImage: NexusGenRootTypes['Image'] | null; // Image
    profileImageId: number | null; // Int
  }
  Query: { // field return type
    imageRead: NexusGenRootTypes['Image']; // Image!
    imageStatus: NexusGenRootTypes['ImageStatus']; // ImageStatus!
    images: NexusGenRootTypes['ImageQueryResult'] | null; // ImageQueryResult
    userProfileRead: NexusGenRootTypes['ProfileUser']; // ProfileUser!
    userRead: NexusGenRootTypes['User']; // User!
    users: NexusGenRootTypes['UsersQueryResult'] | null; // UsersQueryResult
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    isBanned: boolean | null; // Boolean
    lastName: string | null; // String
    profileImageId: number | null; // Int
    role: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  UsersQueryResult: { // field return type
    totalCount: number | null; // Int
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  UserBaseNode: { // field return type
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    profileImageId: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  AdminUser: { // field return type name
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
  AuthPayload: { // field return type name
    tokens: 'AuthPayloadTokens'
    user: 'AuthUser'
  }
  AuthPayloadToken: { // field return type name
    expires: 'String'
    token: 'JWT'
  }
  AuthPayloadTokens: { // field return type name
    access: 'AuthPayloadToken'
    refresh: 'AuthPayloadToken'
  }
  AuthUser: { // field return type name
    id: 'Int'
    permissions: 'String'
    roles: 'String'
  }
  BooleanResult: { // field return type name
    result: 'Boolean'
  }
  GeoPoint: { // field return type name
    lat: 'Float'
    lng: 'Float'
  }
  Image: { // field return type name
    alt: 'JSON'
    createdAt: 'DateTime'
    credits: 'JSON'
    id: 'Int'
    meta: 'JSON'
    status: 'Int'
    updatedAt: 'DateTime'
    uuid: 'String'
  }
  ImageQueryResult: { // field return type name
    images: 'Image'
    totalCount: 'Int'
  }
  ImageStatus: { // field return type name
    id: 'Int'
    meta: 'JSON'
    status: 'Int'
  }
  Mutation: { // field return type name
    authLogin: 'AuthPayload'
    authLogout: 'BooleanResult'
    authPasswordRequest: 'BooleanResult'
    authPasswordReset: 'BooleanResult'
    authRefresh: 'AuthPayload'
    authRequestEmailVerificationEmail: 'BooleanResult'
    authVerifyEmail: 'BooleanResult'
    imageDelete: 'BooleanResult'
    imageUpdate: 'Image'
    userCreate: 'User'
    userDelete: 'BooleanResult'
    userProfileImageDelete: 'BooleanResult'
    userProfilePasswordUpdate: 'User'
    userProfileUpdate: 'User'
    userSignup: 'AuthPayload'
    userUpdate: 'BooleanResult'
  }
  ProfileUser: { // field return type name
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    profileImage: 'Image'
    profileImageId: 'Int'
  }
  Query: { // field return type name
    imageRead: 'Image'
    imageStatus: 'ImageStatus'
    images: 'ImageQueryResult'
    userProfileRead: 'ProfileUser'
    userRead: 'User'
    users: 'UsersQueryResult'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    isBanned: 'Boolean'
    lastName: 'String'
    profileImageId: 'Int'
    role: 'String'
    updatedAt: 'DateTime'
  }
  UsersQueryResult: { // field return type name
    totalCount: 'Int'
    users: 'User'
  }
  UserBaseNode: { // field return type name
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    profileImageId: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authLogin: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      password: string; // String!
    }
    authLogout: { // args
      userId: number; // Int!
    }
    authPasswordRequest: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      scope: string; // String!
    }
    authPasswordReset: { // args
      password: string; // String!
      token: string; // String!
    }
    authRequestEmailVerificationEmail: { // args
      scope: string; // String!
      userId: number; // Int!
    }
    authVerifyEmail: { // args
      token: string; // String!
    }
    imageDelete: { // args
      id: number; // Int!
    }
    imageUpdate: { // args
      data: NexusGenInputs['ImageUpdateInput']; // ImageUpdateInput!
      id: number; // Int!
    }
    userCreate: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
    userDelete: { // args
      id: number; // Int!
    }
    userProfileImageDelete: { // args
      id: number; // Int!
    }
    userProfilePasswordUpdate: { // args
      id: number; // Int!
      password: string; // String!
    }
    userProfileUpdate: { // args
      data: NexusGenInputs['UserProfileUpdateInput']; // UserProfileUpdateInput!
      id: number; // Int!
    }
    userSignup: { // args
      data: NexusGenInputs['UserSignupInput']; // UserSignupInput!
    }
    userUpdate: { // args
      data: NexusGenInputs['UserUpdateInput']; // UserUpdateInput!
      id: number; // Int!
    }
  }
  Query: {
    imageRead: { // args
      id: number; // Int!
    }
    imageStatus: { // args
      id: number; // Int!
    }
    images: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      taxonomyId?: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    userProfileRead: { // args
      id: number; // Int!
    }
    userRead: { // args
      id: number; // Int!
    }
    users: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  UserBaseNode: "ProfileUser" | "User"
}

export interface NexusGenTypeInterfaces {
  ProfileUser: "UserBaseNode"
  User: "UserBaseNode"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "UserBaseNode";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: NexusResolverContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}
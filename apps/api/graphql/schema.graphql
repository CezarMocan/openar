### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminUser {
  firstName: String
  id: Int
  lastName: String
}

type AuthPayload {
  tokens: AuthPayloadTokens
  user: AuthUser
}

type AuthPayloadToken {
  expires: String!
  token: JWT
}

type AuthPayloadTokens {
  access: AuthPayloadToken
  refresh: AuthPayloadToken
  sign: AuthPayloadToken
}

type AuthUser {
  """email address of the user"""
  email: String

  """ethAddress of the user"""
  ethAddress: String!

  """Id of the user"""
  id: Int!

  """
  true if this ethAddress has just been registered in the system (first connect)
  """
  isNew: Boolean

  """The message that should be signed on login"""
  message: String

  """The permissions the user might have been given"""
  permissions: [String]

  """Pseudonym of the user"""
  pseudonym: String

  """The roles the user might hold"""
  roles: [String]
}

type BooleanResult {
  result: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type GeoPoint {
  lat: Float
  lng: Float
}

type Image {
  alt: JSON
  createdAt: DateTime
  credits: JSON
  id: Int!
  meta: JSON
  status: Int
  updatedAt: DateTime
  uuid: String
}

"""List all the available images in the database."""
type ImageQueryResult {
  images: [Image]
  totalCount: Int
}

type ImageStatus {
  id: Int!
  meta: JSON
  status: Int!
}

input ImageTranslationInput {
  id: Int!
  translations: JSON!
}

input ImageUpdateInput {
  meta: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Mutation {
  authLogin(ethAddress: String!, signedMessage: String!): AuthPayload!
  authLogout(userId: Int!): BooleanResult!
  authPreLogin(ethAddress: String!): AuthPayload!
  authRefresh: AuthPayload!
  authRequestEmailVerificationEmail(scope: String!, userId: Int!): BooleanResult!
  authVerifyEmail(token: String!): BooleanResult!
  imageDelete(id: Int!): BooleanResult!
  imageUpdate(data: ImageUpdateInput!, id: Int!): Image!
  userCreate(data: UserCreateInput!): User!
  userDelete(id: Int!): BooleanResult!
  userProfileImageDelete(id: Int!): BooleanResult!
  userProfileUpdate(data: UserProfileUpdateInput!, id: Int!): User!
  userUpdate(data: UserUpdateInput!, id: Int!): BooleanResult!
}

type ProfileUser implements UserBaseNode {
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  profileImage: Image
  profileImageId: Int
}

type Query {
  imageRead(id: Int!): Image!
  imageStatus(id: Int!): ImageStatus!
  images(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, taxonomyId: Int, where: JSON): ImageQueryResult
  userByEthAddress(ethAddress: String!): User!
  userProfileRead(id: Int!): ProfileUser!
  userRead(id: Int!): User!
  users(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): UsersQueryResult
}

type User implements UserBaseNode {
  createdAt: DateTime
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  isBanned: Boolean
  lastName: String
  profileImageId: Int
  role: String
  updatedAt: DateTime
}

interface UserBaseNode {
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  profileImageId: Int
}

input UserCreateInput {
  acceptedTerms: Boolean!
  email: String!
  firstName: String!
  isBanned: Boolean!
  lastName: String!
  password: String!
  role: String!
}

input UserProfileUpdateInput {
  email: EmailAddress!
  firstName: String!
  lastName: String!
}

input UserSignupInput {
  acceptedTerms: Boolean!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  password: String!
}

input UserUpdateInput {
  email: String!
  firstName: String!
  isBanned: Boolean!
  lastName: String!
  role: String!
}

"""
TODO: write better descriptions
last item in the list. Pass this cuSimple wrapper around our list of launches that contains a cursor to the
last item in the list. Pass this cursor to the launches query to fetch results
after these.
"""
type UsersQueryResult {
  totalCount: Int
  users: [User]
}

import { useState, useEffect } from "react";
import type { ReactElement } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

import { LayoutBlank } from "~/components/app";
import { WalletActionRequired } from "~/components/frontend";
import { Box, Text, Button } from "@chakra-ui/react";
import { useConfigContext } from "~/providers";
import {
  useAuthentication,
  useTypedSelector,
  useWalletLogin,
  useLocalStorage,
} from "~/hooks";

import { user, authentication } from "~/services";
import { appConfig } from "~/config";

const OpenARLogin = () => {
  const {
    account,
    walletLoginRequestSignature,
    walletLoginError,
    walletDisconnect,
    library,
  } = useWalletLogin();
  const [connectedVia] = useLocalStorage("connected", undefined);
  const [appUser, {hasCookies}] = useAuthentication();
  const stateUser = useTypedSelector(({ user }) => user);
  const stateCrypto = useTypedSelector(({ crypto }) => crypto);
  const router = useRouter();
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  let navigating = false;

  useEffect(() => {
    if (
      library &&
      library?.provider &&
      account &&
      appUser &&
      stateUser.authenticated && 
      hasCookies()
    ) {
      console.log("/x/ 1");
      router.push("/x/");
      navigating = true;
    } else {
      if (!stateCrypto.signatureRequired) {
        console.log("/login sign 1", router.asPath);
        router.push(appConfig.reauthenticateRedirectUrl);
        navigating = true;
      }
    }
  }, [library, library?.provider, account, appUser, stateUser.authenticated, stateCrypto.signatureRequired, hasCookies]);

  useEffect(() => {
    if (!library || !library?.provider) {
      if (stateCrypto.signatureRequired && connectedVia === "walletconnect") {
        console.log("Trigger walletDisconnect in OpenARLogin");
        walletDisconnect();
      }
    }
  }, [library, walletDisconnect, stateCrypto.signatureRequired, connectedVia]);

  return (
    <Box p="6">
      <Head>
        <title>TODO: OpenAR Title</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {!appUser &&
        stateUser.justConnected &&
        !stateUser.authenticated &&
        stateCrypto.loginMessage && (
          <Box>
            <Text mb="4">
              Hello, you&#39;re now connected with your wallet, to fully login
              please sign the login request using the button below.
            </Text>

            {walletLoginError && (
              <Text color="openar.error">{walletLoginError}</Text>
            )}
            <Button
              mt="4"
              onClick={async () => {
                setIsLoggingIn(true);
                try {
                  await walletLoginRequestSignature(
                    stateCrypto.loginMessage,
                    account
                  );
                } catch (err) {}
              }}
              variant="outlineBlack"
            >
              Sign login request
            </Button>

            <WalletActionRequired
              title="Signature required"
              showClose={false}
              isOpen={isLoggingIn && !walletLoginError}
            >
              Please sign the login signature in your connected wallet
            </WalletActionRequired>
          </Box>
        )}
      {!stateUser.justConnected &&
        (appUser || stateUser.authenticated) &&
        !navigating && (
          <Box>
            <Text>
              We are logging you in.
            </Text>
          </Box>
        )}
    </Box>
  );
};

OpenARLogin.getLayout = function getLayout(page: ReactElement) {
  return <LayoutBlank>{page}</LayoutBlank>;
};

export default OpenARLogin;
